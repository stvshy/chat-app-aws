spring.application.name=chat-service
server.port=8082

# Logging
logging.level.org.springframework.security=DEBUG
logging.level.pl.projektchmury.chatservice=DEBUG
logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.tool.hbm2ddl=DEBUG

# Konfiguracja Bazy Danych (PostgreSQL)
# Te wartości będą używane, gdy aplikacja działa w Docker Compose
spring.datasource.url=jdbc:postgresql://postgres_chat_db:5432/chat_service_db
spring.datasource.username=admin # Lub chatuser, jeśli tak ustawisz w docker-compose
spring.datasource.password=admin # Lub chatpassword
spring.datasource.driver-class-name=org.postgresql.Driver

# Konfiguracja JPA/Hibernate
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
# spring.jpa.open-in-view=false # Domyślnie false w nowszych Spring Boot
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true
# spring.jpa.properties.hibernate.default_schema=public # Zazwyczaj niepotrzebne, jeśli użytkownik ma domyślny schemat

# AWS Cognito Configuration (dla walidacji tokenów)
aws.cognito.region=${AWS_COGNITO_REGION:us-east-1}
aws.cognito.userPoolId=${AWS_COGNITO_USER_POOL_ID:twoj-domyslny-user-pool-id}
aws.cognito.clientId=${AWS_COGNITO_CLIENT_ID:twoj-domyslny-client-id}

# Spring Security OAuth2 Resource Server Configuration
spring.security.oauth2.resourceserver.jwt.issuer-uri=https://cognito-idp.${aws.cognito.region}.amazonaws.com/${aws.cognito.userPoolId}
